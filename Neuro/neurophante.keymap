/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define COMBO_TIMEOUT 60

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define COMBO   3

/ {
    macros {
	hello: hello {
            label = "hello";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 10>
		,<&macro_tap &kp H &kp E &kp L &kp L &kp O>
                ;
        };
    };
};


/ {
    combos {
        compatible = "zmk,combos";
 	 combo_del {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <11 12 13>;
            bindings = <&mt RALT DEL>;
        };
	 combo_cw {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 3 4>;
            bindings = <&caps_word>;
        };
	 combo_tab {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 11 12>;
            bindings = <&mt K_CONTEXT_MENU TAB>;
        };
	 combo_row {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <12 13 14>;
            bindings = <&kp LS(HOME)>;
        };
	 combo_esc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1 2>;
            bindings = <&kp ESC>;
	 };
	 combo_ctlbksp {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 7 8>;
            bindings = <&kp LC(BSPC)>;
        };
	 combo_bksp {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <16 17 18>;
            bindings = <&kp BSPC>;
        };
    };
};

&caps_word {
	continue-list = <UNDERSCORE MINUS BACKSPACE DELETE HOME END LEFT RIGHT>;
};

&kscan0 {
	debounce-period = <20>;
	};

/ {
	behaviors {

        bh: layer_taps 
		{
			compatible = "zmk,behavior-hold-tap";
			label = "Layer-Tap";
			#binding-cells = <2>;
			tapping_term_ms = <215>;
            flavor = "tap-preferred";
			bindings = <&mo>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
		sm: shift_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
     };
   };

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
						
				&mt K_MUTE LG(LS(SPACE))				&kp F7
&kp N1  	&kp N2	&kp N3	&kp N4	&kp N5	&kp N6   		&kp N7	&kp N8	&kp N9	&kp N0 	 &kp UNDER	&kp PLUS
&kp Q		&kp W	&kp E	&kp R	&kp T   &kp Y			&kp U	&kp I	&kp O 	&kp P	 &kp LBKT	&kp RBKT
&kp A 		&kp S 	&kp D 	&kp F 	&kp G   &kp H 			&kp J  	&kp K 	&kp L   &kp SEMI &kp SQT 	&kp GRAVE
&kp Z 		&kp X 	&kp C 	&kp V 	&kp B   &kp KP_MULTIPLY		&kp FSLH &kp N  &kp M  	&kp COMMA &kp DOT   &kp FSLH
&kp HOME  	&kp END	&kp LEFT &kp RIGHT						&kp UP  &kp DOWN  &kp PG_UP &kp PG_DN
                                                &kp BSPC		&kp TAB 
						&kp SPACE		&kp RET
						&kp LSHFT		&kp DEL
				&kp LCTRL 	&kp LALT		&kp ESC 	&trans
				&trans							&kp LGUI
                        >;

                };
                lower_layer {

                        bindings = <
				&mt K_MUTE LG(LS(SPACE))				&kp F7
&kp N1  	&kp N2	&kp N3	&kp N4	&kp N5	&kp N6   		&kp N7	&kp N8	&kp N9	&kp N0 	 &kp UNDER	&kp PLUS
&kp Q		&kp W	&kp E	&kp R	&kp T   &kp Y			&kp U	&kp I	&kp O 	&kp P	 &kp LBKT	&kp RBKT
&kp A 		&kp S 	&kp D 	&kp F 	&kp G   &kp H 			&kp J  	&kp K 	&kp L   &kp SEMI &kp SQT 	&kp GRAVE
&kp Z 		&kp X 	&kp C 	&kp V 	&kp B   &kp KP_MULTIPLY		&kp FSLH &kp N  &kp M  	&kp COMMA &kp DOT   &kp FSLH
&kp HOME  	&kp END	&kp LEFT &kp RIGHT						&kp UP  &kp DOWN  &kp PG_UP &kp PG_DN
                                                &kp BSPC		&kp TAB 
						&kp SPACE		&kp RET
						&kp LSHFT		&kp DEL
				&kp LCTRL 	&kp LALT		&kp ESC 	&trans
				&trans							&kp LGUI
                        >;

                };

                raise_layer {

                        bindings = <
				&mt K_MUTE LG(LS(SPACE))				&kp F7
&kp N1  	&kp N2	&kp N3	&kp N4	&kp N5	&kp N6   		&kp N7	&kp N8	&kp N9	&kp N0 	 &kp UNDER	&kp PLUS
&kp Q		&kp W	&kp E	&kp R	&kp T   &kp Y			&kp U	&kp I	&kp O 	&kp P	 &kp LBKT	&kp RBKT
&kp A 		&kp S 	&kp D 	&kp F 	&kp G   &kp H 			&kp J  	&kp K 	&kp L   &kp SEMI &kp SQT 	&kp GRAVE
&kp Z 		&kp X 	&kp C 	&kp V 	&kp B   &kp KP_MULTIPLY		&kp FSLH &kp N  &kp M  	&kp COMMA &kp DOT   &kp FSLH
&kp HOME  	&kp END	&kp LEFT &kp RIGHT						&kp UP  &kp DOWN  &kp PG_UP &kp PG_DN
                                                &kp BSPC		&kp TAB 
						&kp SPACE		&kp RET
						&kp LSHFT		&kp DEL
				&kp LCTRL 	&kp LALT		&kp ESC 	&trans
				&trans							&kp LGUI
                        >;

		};
		
				combo_layer {

                        bindings = <
				&mt K_MUTE LG(LS(SPACE))				&kp F7
&kp N1  	&kp N2	&kp N3	&kp N4	&kp N5	&kp N6   		&kp N7	&kp N8	&kp N9	&kp N0 	 &kp UNDER	&kp PLUS
&kp Q		&kp W	&kp E	&kp R	&kp T   &kp Y			&kp U	&kp I	&kp O 	&kp P	 &kp LBKT	&kp RBKT
&kp A 		&kp S 	&kp D 	&kp F 	&kp G   &kp H 			&kp J  	&kp K 	&kp L   &kp SEMI &kp SQT 	&kp GRAVE
&kp Z 		&kp X 	&kp C 	&kp V 	&kp B   &kp KP_MULTIPLY		&kp FSLH &kp N  &kp M  	&kp COMMA &kp DOT   &kp FSLH
&kp HOME  	&kp END	&kp LEFT &kp RIGHT						&kp UP  &kp DOWN  &kp PG_UP &kp PG_DN
                                                &kp BSPC		&kp TAB 
						&kp SPACE		&kp RET
						&kp LSHFT		&kp DEL
				&kp LCTRL 	&kp LALT		&kp ESC 	&trans
				&trans							&kp LGUI
                        >;

		};
        };
};
